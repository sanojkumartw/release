name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  id-token: write 

jobs:
  release:
    runs-on: ubuntu-latest
    # Only run if there are commits that would trigger a release
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[no release]') }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up uv and python
        uses: astral-sh/setup-uv@v6
        with:
          python-version: 3.12
          enable-cache: true

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-${{ hashFiles('uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: uv sync --dev

      - name: Validate commit messages
        run: |
          # Check if there are any conventional commits that would trigger a release
          if ! git log --oneline --since="$(git describe --tags --abbrev=0 2>/dev/null || echo 'HEAD~10')" | grep -E "^(feat|fix|perf|refactor|docs|style|test|chore|ci|build|revert)(\(.+\))?!?: "; then
            echo "No conventional commits found that would trigger a release"
            echo "Skipping release workflow"
            exit 0
          fi

      - name: Run pre-commit hooks
        run: |
          uv run pre-commit run --all-files || true

      - name: Run tests
        run: |
          uv run pytest tests/ -v --tb=short

      - name: Check if release is needed
        id: check-release
        run: |
          # Use the version from pyproject.toml to ensure consistency
          uvx --from="python-semantic-release@10.4.0" semantic-release version --dry-run
          echo "release_needed=true" >> $GITHUB_OUTPUT

      - name: Create release
        if: steps.check-release.outputs.release_needed == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create a wrapper function for semantic-release
          sr() {
            uvx --from="python-semantic-release@10.4.0" semantic-release "$@"
          }

          # Run semantic-release with proper error handling
          echo "Running semantic-release version..."
          sr version || {
            echo "Version step failed"
            exit 1
          }

          echo "Running semantic-release publish..."
          sr publish || {
            echo "Publish step failed"
            exit 1
          }

          echo "Release completed successfully!"

      - name: Notify on failure
        if: failure()
        run: |
          echo "Release workflow failed. Check the logs for details."
          echo "Common issues:"
          echo "- No conventional commits found"
          echo "- Version already exists"
          echo "- Insufficient permissions"
          echo "- Invalid commit message format"